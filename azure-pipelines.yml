# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    Bright_scan_node_18_x:
      node_version: 18.x

steps:
- task: NodeTool@0 
  inputs:
    versionSpec: $(node_version)

- script: |
    npm install @brightsec/cli -g || true
    BRIGHT_TOKEN=3mw20ij.nexr.oyij0hjzq0jfsgkfzaa88h0hipud3zrr
    PROJECT_ID=2TqNHzBx565h9BUHbJq7DE
    echo "Start Bright Scan 🏁"
    SCAN_ID=$(bright-cli scan:run --token $BRIGHT_TOKEN  --name "Azure smallcrystals BC Scan from Cloud, Scan 23" --archive gWC3YDX2CAWpB5mUk9jg2Z --smart  --test csrf unvalidated_redirect http_method_fuzzing insecure_tls_configuration sqli xss full_path_disclosure open_cloud_storage --project $PROJECT_ID --auth bQAugBMJeu18DjGE9GYbHH --cluster app.brightsec.com)
    echo "Scan was started and can be checked at https://app.brightsec.com/scans/$SCAN_ID"
    sleep 10
    echo "Wait for issues ⏳\n"
    POLLING_RESULT=$(bright-cli scan:polling --interval 30s --timeout 7200 --token $BRIGHT_TOKEN --breakpoint high_issue $SCAN_ID --cluster app.brightsec.com)
    echo "Polling result is $POLLING_RESULT "
    echo $POLLING_RESULT > ./polling_result
    echo "poling result is ..."
    tail -n 7 polling_result
    POLLING_STATUS=$(sed -n '/Breakpoint:/p' polling_result)
    if [ -z "$POLLING_STATUS" ]
      then
          echo "No need to stop scan"
      else
          echo "Stop Scan 🛑"
          bright-cli scan:stop --token $BRIGHT_TOKEN $SCAN_ID --cluster app.brightsec.com
    fi

    jq --version

    GET_ID=$(curl -s -X 'GET' 'https://app.brightsec.com/api/v1/scans/'$SCAN_ID'/issues' -H 'accept: application/json' -H 'Authorization: Api-Key '$BRIGHT_TOKEN'' | jq '.[].id' )
    ISSUES_ID_ARRAY=$(sed -e 's/^"//' -e 's/"$//' <<<"$GET_ID")
    a=(); while read -r line; do a+=("$line"); done <<<"$ISSUES_ID_ARRAY"; declare a;
    
    GET_OCCURRENCES=$(curl -s -X 'GET' 'https://app.brightsec.com/api/v1/projects/'$PROJECT_ID'/issues' -H 'accept: application/json' -H 'Authorization: Api-Key '$BRIGHT_TOKEN'' | jq '.[].occurrences')
    ISSUES_PROJECT_OCCURRENCES=$(sed -e 's/^"//' -e 's/"$//' <<<"$GET_OCCURRENCES")
    l=(); while read -r line; do l+=("$line"); done <<<"$ISSUES_PROJECT_OCCURRENCES"; declare l;
    
    GET_NAME=$(curl -s -X 'GET' 'https://app.brightsec.com/api/v1/scans/'$SCAN_ID'/issues' -H 'accept: application/json' -H 'Authorization: Api-Key '$BRIGHT_TOKEN'' | jq '.[].name' )
    ISSUES_NAME_ARRAY=$(sed -e 's/^"//' -e 's/"$//' <<<"$GET_NAME")
    b=(); while read -r line; do b+=("$line"); done <<<"$ISSUES_NAME_ARRAY"; declare b;
            
    GET_DETAILS=$(curl -s -X 'GET' 'https://app.brightsec.com/api/v1/scans/'$SCAN_ID'/issues' -H 'accept: application/json' -H 'Authorization: Api-Key '$BRIGHT_TOKEN'' | jq '.[].details' )
    ISSUES_DETAILS_ARRAY=$(sed -e 's/^"//' -e 's/"$//' <<<"$GET_DETAILS")
    c=(); while read -r line; do c+=("$line"); done <<<"$ISSUES_DETAILS_ARRAY"; declare c;
            
    GET_SEVERITY=$(curl -s -X 'GET' 'https://app.brightsec.com/api/v1/scans/'$SCAN_ID'/issues' -H 'accept: application/json' -H 'Authorization: Api-Key '$BRIGHT_TOKEN'' | jq '.[].severity' )
    ISSUES_SEVERITY_ARRAY=$(sed -e 's/^"//' -e 's/"$//' <<<"$GET_SEVERITY")
    d=(); while read -r line; do d+=("$line"); done <<<"$ISSUES_SEVERITY_ARRAY"; declare d;
            
    GET_EXPOSURE=$(curl -s -X 'GET' 'https://app.brightsec.com/api/v1/scans/'$SCAN_ID'/issues' -H 'accept: application/json' -H 'Authorization: Api-Key '$BRIGHT_TOKEN'' | jq '.[].exposure' )
    ISSUES_EXPOSURE_ARRAY=$(sed -e 's/^"//' -e 's/"$//' <<<"$GET_EXPOSURE")
    f=(); while read -r line; do f+=("$line"); done <<<"$ISSUES_EXPOSURE_ARRAY"; declare f;
            
    GET_CVSS=$(curl -s -X 'GET' 'https://app.brightsec.com/api/v1/scans/'$SCAN_ID'/issues' -H 'accept: application/json' -H 'Authorization: Api-Key '$BRIGHT_TOKEN'' | jq '.[].cvss' )
    ISSUES_CVSS_ARRAY=$(sed -e 's/^"//' -e 's/"$//' <<<"$GET_CVSS")
    g=(); while read -r line; do g+=("$line"); done <<<"$ISSUES_CVSS_ARRAY"; declare g;

    GET_CWE=$(curl -s -X 'GET' 'https://app.brightsec.com/api/v1/scans/'$SCAN_ID'/issues' -H 'accept: application/json' -H 'Authorization: Api-Key '$BRIGHT_TOKEN'' | jq '.[].cwe' )
    ISSUES_CWE_ARRAY=$(sed -e 's/^"//' -e 's/"$//' <<<"$GET_CWE")
    h=(); while read -r line; do h+=("$line"); done <<<"$ISSUES_CWE_ARRAY"; declare h;
                
    GET_REMEDY=$(curl -s -X 'GET' 'https://app.brightsec.com/api/v1/scans/'$SCAN_ID'/issues' -H 'accept: application/json' -H 'Authorization: Api-Key '$BRIGHT_TOKEN'' | jq '.[].remedy' )
    ISSUES_REMEDY_ARRAY=$(sed -e 's/^"//' -e 's/"$//' <<<"$GET_REMEDY")
    r=(); while read -r line; do r+=("$line"); done <<<"$ISSUES_REMEDY_ARRAY"; declare r;
                
    GET_TIME=$(curl -s -X 'GET' 'https://app.brightsec.com/api/v1/scans/'$SCAN_ID'/issues' -H 'accept: application/json' -H 'Authorization: Api-Key '$BRIGHT_TOKEN'' | jq '.[].time' )
    ISSUES_TIME_ARRAY=$(sed -e 's/^"//' -e 's/"$//' <<<"$GET_TIME")
    s=(); while read -r line; do s+=("$line"); done <<<"$ISSUES_TIME_ARRAY"; declare s;
                
    GET_PROJECTISSUES=$(curl -s -X 'GET' 'https://app.brightsec.com/api/v1/projects/'$PROJECT_ID'/issues' -H 'accept: application/json' -H 'Authorization: Api-Key '$BRIGHT_TOKEN'')

    echo "We found ${#a[*]} vulnerabilities in this scan"
    echo "There are a total of  ${#l[*]} issues in this project."
      len=0
      for t in ${a[@]}; do
          let len=len+1
      done
      i=0
      while [ $i -lt $len ]; do
          echo " "
          echo " "
          echo "ID OF THE SCAN IS    ${a[$i]}"
          echo "NAME    "${b[$i]}
          echo "DETAILS    "${c[$i]}
          echo "SEVERITY    "${d[$i]}
          echo "PROTOCOL    "${e[$i]}
          echo "EXPOSURE    "${f[$i]}
          echo "CVSS    "${g[$i]}
          echo "CWE    "${h[$i]}
          echo "TIME    "${j[$i]}
          let i=i+1
      done